@using System.Linq
@using Microsoft.EntityFrameworkCore
@model BudgetTracker.Models.BudgetWithTasksViewModel
@using BudgetTracker.Models;

<!-- 
  In your _Layout or global <head>:
  1) <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
  2) <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
  3) Make sure body/html is set to a dark background with minimal margin/padding
-->
<link rel="stylesheet" href="~/BudgetTracker.styles.css" asp-append-version="true" />

<style>
    /* Hero gradient */
    .hero-section {
        background: linear-gradient(135deg, #343a40 0%, #232526 100%);
        padding: 3rem 1rem;
        text-align: center;
        color: #f8f9fa;
        margin-bottom: 2rem;
        position: relative;
    }
    .hero-section::after {
        content: "";
        position: absolute;
        top: 0; left: 0; right: 0; bottom: 0;
        background: url('https://picsum.photos/1920/1080?grayscale&blur=3') center/cover no-repeat;
        opacity: 0.25;
        z-index: 0;
    }
    .hero-section-content {
        position: relative;
        z-index: 1; /* Ensure text is above background overlay */
    }

    /* Custom purple outline button */
    .btn-outline-purple {
        color: #d0bfff;
        border-color: #d0bfff;
    }
    .btn-outline-purple:hover {
        background-color: #d0bfff;
        color: #fff; 
    }

    /* Force text to be white or light on dark backgrounds */
    .text-dark {
        color: #fff !important;
    }
    .text-muted {
        color: #b3b3b3 !important;
    }
    ::-webkit-input-placeholder {
        color: #ccc !important;
    }
    :-ms-input-placeholder {
        color: #ccc !important;
    }
    ::placeholder {
        color: #ccc !important;
    }

    /* Example custom button classes */
    .custom-create-btn    { color: #0d6efd; border-color: #0d6efd; }
    .custom-create-btn:hover {
        background-color: #0d6efd;
        color: #fff;
    }
    .custom-view-btn      { color: #d0bfff; border-color: #4400ffaf; }
    .custom-view-btn:hover {
        background-color: #d0bfff;
        color: #fff;
    }
    .custom-edit-btn      { color: #ffc107; border-color: #ffc107; }
    .custom-edit-btn:hover {
        background-color: #ffc107;
        color: #000;
    }
    .custom-bills-btn     { color: #0dcaf0; border-color: #2ab300; }
    .custom-bills-btn:hover {
        background-color: #0dcaf0;
        color: #000;
    }
    .custom-delete-btn    { color: #dc3545; border-color: #dc3545; }
    .custom-delete-btn:hover {
        background-color: #dc3545;
        color: #fff;
    }
    .custom-complete-btn  { color: #198754; border-color: #0dcaf0;; }
    .custom-complete-btn:hover {
        background-color: #198754;
        color: #fff;
    }

    /* Semi-transparent glass effect */
    .glass-panel {
        background: rgba(255, 255, 255, 0.07);
        backdrop-filter: blur(8px);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.15);
    }
</style>

<!-- Main Layout -->
<div class="d-flex flex-nowrap">
    <!-- Sidebar Placeholder (optional) -->
    <!-- Uncomment and add code for a sidebar here if needed -->
    <!-- <nav id="sidebar" ...>Sidebar Code</nav> -->

    
<!-- Toast Container -->
<div aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
    <!-- Toast -->
    <div id="successToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                @TempData["Successful"]
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>

    <div id="errorToast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                @TempData["Error"]
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>


    <!-- Main Content Area -->
    <div class="flex-fill">
        <!-- Hero Section -->
        <div class="hero-section text-light mb-10">
            <!-- Header Title and Subtitle -->
            <div class="create-header-title">
                <!-- Main Dashboard Title -->
                <h1 class="display-5 fw-bold">My Dashboard</h1>
                <!-- Placeholder for a lead paragraph or subheading -->
                <p class="lead mb-0"></p>
            </div>
        </div>

        <!-- Main Row Container -->
        <div class="container-fluid px-4">
            <div class="row g-3">
                <!-- LEFT COLUMN: Budgets, Today's Tasks, Today's Schedule -->
                <div class="col-lg-8">
                    <!-- Create New Budget Card -->
                    <div class="card glass-panel mb-4 text-light border-white">
                        <!-- Card Body -->
                        <div class="card-body">
                            <!-- Section Title -->
                            <h4 class="create-budget-title">
                                <!-- Icon and Title -->
                                <i class="fas fa-plus-circle text-info me-2"></i>Create New Budget
                            </h4>

                            <!-- Form to Create a New Budget -->
                            <form asp-action="Create"
                                  asp-controller="Budget"
                                  method="post"
                                  class="row g-2">
                                <!-- Input for Budget Name -->
                                <div class="col-md-5">
                                    <input type="text"
                                           name="Name"
                                           class="form-control bg-transparent text-light border-light"
                                           placeholder="Budget Name"
                                           required />
                                </div>
                                <!-- Input for Total Amount -->
                                <div class="col-md-5">
                                    <input type="number"
                                           name="TotalAmount"
                                           class="form-control bg-transparent text-light border-light"
                                           placeholder="Total Amount"
                                           step="0.01"
                                           required />
                                </div>
                                <!-- Submit Button -->
                                <div class="col-md-2 d-grid">
                                    <button type="submit" class="btn custom-create-btn fw-semibold text-white">
                                        Add Budget
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>







<!-- Budgets Section -->
<h4 class="fw-bold mb-3 text-light">
    <!-- Wallet Icon and Section Title -->
    <i class="fas fa-wallet me-2 text-warning"></i>Your Budgets
</h4>

<!-- Check if there are any budgets to display -->
@if (Model.Budgets.Any())
{
    <!-- Row container for budgets -->
    <div class="row row-cols-1 row-cols-md-2 g-3">
        <!-- Loop through each budget in the model -->
        @foreach (var budget in Model.Budgets)
        {
            <div class="col">
                <!-- Budget Card -->
                <div class="card glass-panel h-100 text-light border-white">
                    <div class="card-body d-flex flex-column">
                        <!-- Budget Header: Name and Date -->
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <div>
                                <!-- Display Budget Name -->
                                <h5 class="fw-bold">@budget.Name</h5>
                                <!-- Display Budget Creation Date -->
                                <small class="text-muted">
                                    Created: @budget.DateCreated.ToShortDateString()
                                </small>
                            </div>
                        </div>






<!-- Budget Summary Section -->
<div class="mb-3">
    <!-- Display Total Budget Amount -->
    <div class="text-muted">
        Total: @budget.TotalAmount.ToString("C")
    </div>
    <!-- Display Remaining Budget Amount -->
    <div class="text-muted">
        Remaining:
        <!-- Conditional Styling for Remaining Amount -->
        <!-- Use 'text-success' for positive values and 'text-danger' for negative values -->
        <span class="fw-bold @(budget.RemainingAmount >= 0 ? "text-success" : "text-danger")">
            @budget.RemainingAmount.ToString("C")
        </span>
    </div>
</div>





<!-- Budget Actions Section -->
<div class="mt-auto d-flex flex-wrap gap-2">
    <!-- View Budget Details Button -->
    <a class="btn custom-view-btn btn-sm text-white"
       href="@Url.Action("Details", "Budget", new { id = budget.Id })">
        <!-- Eye Icon and Label -->
        <i class="fas fa-eye me-1"></i>View
    </a>
    <!-- Edit Budget Button -->
    <a class="btn custom-edit-btn btn-sm text-white"
       href="@Url.Action("Edit", "Budget", new { id = budget.Id })">
        <!-- Edit Icon and Label -->
        <i class="fas fa-edit me-1"></i>Edit
    </a>
    <!-- Add Category to Budget Button -->
    <a class="btn custom-create-btn btn-sm text-white"
       href="@Url.Action("Create", "Category", new { budgetId = budget.Id })">
        <!-- Folder Plus Icon and Label -->
        <i class="fas fa-folder-plus me-1"></i>Add Category
    </a>
    <!-- View Bills Linked to Budget Button -->
    <a class="btn custom-bills-btn btn-sm text-white"
       href="@Url.Action("ViewBills", "Bill", new { budgetId = budget.Id })">
        <!-- Invoice Dollar Icon and Label -->
        <i class="fas fa-file-invoice-dollar me-1"></i>View Bills
    </a>

                                                <!-- Delete Budget Button -->
                                                <!-- Pass the budget name as a data attribute -->
                                                <!-- Bootstrap toggle for opening a modal -->
                                                <!-- Target the delete confirmation modal -->
                                                <button class="btn custom-delete-btn btn-sm delete-btn text-white"
                                                        type="button"
                                                        data-id="@budget.Id"
                                                        data-name="@budget.Name"  
                                                        data-bs-toggle="modal"
                                                        data-bs-target="#deleteBudgetModal">
                                                        <!-- Trash Icon and Label -->
                                                    <i class="fas fa-trash-alt me-1"></i>Delete
                                                </button>
                    </div> <!-- End of Actions Section -->

                    </div> <!-- End of Card Body -->
                    </div> <!-- End of Budget Card -->
                    </div> <!-- End of Column -->

                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-secondary text-center mt-3" role="alert">
                                                No budgets available. Create one above to get started.
                                            </div>
                                        }












<!-- Today's Tasks Section -->
<div class="card glass-panel text-light mt-5 border-white">
    <div class="card-body">
        <!-- Section Title -->
        <h5 class="fw-bold mb-3 text-white">
            <!-- Check Square Icon and Section Label -->
            <i class="fas fa-check-square me-2"></i>Today's Tasks
        </h5>

        <!-- Tasks Table Container -->
        <div class="table-responsive">
            <table class="elegant-table">
                <!-- Table Header -->
                <thead>
                    <tr>
                        <th>Task</th> <!-- Column for task name -->
                        <th>Due</th> <!-- Column for task due date -->
                        <th>Status</th> <!-- Column for task completion status -->
                        <th class="text-end">Actions</th> <!-- Column for task action buttons -->
                    </tr>
                </thead>

                <!-- Table Body -->
                <tbody>
                    <!-- Check if there are any tasks for today -->
                    @if (Model.TodayTasks.Any())
                    {
                        <!-- Loop through each task in today's tasks -->
                        @foreach (var task in Model.TodayTasks)
                        {
                            <tr>
                                <!-- Task Name -->
                                <td>@task.Name</td>

                                <!-- Task Due Date -->
                                <td class="text-muted">
                                    <!-- Display due date if available, otherwise show 'No Due Date' -->
                                    @(task.DueDate.HasValue ? task.DueDate.Value.ToShortDateString() : "No Due Date")
                                </td>

                                <!-- Task Status -->
                                <td>@(task.IsCompleted ? "Completed" : "Pending")</td>

                                <!-- Action Buttons -->
                                <td class="text-end">
                                    <!-- Mark Complete Form -->
                                    <form method="post"
                                          asp-action="MarkComplete"
                                          asp-controller="ToDo"
                                          asp-route-id="@task.Id"
                                          class="d-inline">
                                        <!-- Submit button to mark task as complete -->
                                        <button type="submit"
                                                class="btn custom-create-btn btn-sm text-white"
                                                title="Mark Complete">
                                            <i class="fas fa-check me-0"></i>Complete
                                        </button>
                                    </form>

                                    <!-- Delete Task Form -->
                                    <form method="post"
                                          asp-action="Delete"
                                          asp-controller="ToDo"
                                          asp-route-id="@task.Id"
                                          class="d-inline">
                                        <!-- Submit button to delete the task -->
                                        <button type="submit"
                                                class="btn custom-delete-btn btn-sm text-white"
                                                title="Delete Task">
                                            <i class="fas fa-trash me-0"></i>Delete
                                        </button>
                                    </form>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <!-- Message for no tasks available -->
                        <tr>
                            <td colspan="4" class="text-center text-muted">
                                No tasks for today
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>














<!-- Today's Schedule -->
<div class="card glass-panel text-light mt-4 border-white">
    <div class="card-body">
        <!-- Section Title -->
        <h5 class="fw-bold mb-3 text-white">
            <!-- Clock Icon and Label -->
            <i class="fas fa-clock me-2"></i>Today's Schedule
        </h5>

        <!-- Schedule Table Container -->
        <div class="table-responsive">
            <table class="elegant-table">
                <!-- Table Header -->
                <thead>
                    <tr>
                        <th>Time</th> <!-- Column for time of task -->
                        <th>Task</th> <!-- Column for task name -->
                        <th>Status</th> <!-- Column for task completion status -->
                    </tr>
                </thead>
                <!-- Table Body -->
                <tbody>
                    <!-- Check if there are any schedules for today -->
                    @if (Model.DailySchedules != null && Model.DailySchedules.Any())
                    {
                        <!-- Loop through daily schedules with a valid task -->
                        @foreach (var schedule in Model.DailySchedules.Where(s => s.Task != null))
                        {
                            <tr>
                                <!-- Display formatted time in 12-hour format -->
                                <td>
                                    @($"{(schedule.Hour <= 12 ? schedule.Hour : schedule.Hour - 12)}:{(schedule.Minute == 0 ? "00" : "30")} {(schedule.Hour < 12 ? "a.m." : "p.m.")}")
                                </td>
                                <!-- Display the task name -->
                                <td>@schedule.Task.Name</td>
                                <!-- Display task status -->
                                <td>@(schedule.Task.IsCompleted ? "Completed" : "Pending")</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <!-- Message for no schedules available -->
                        <tr>
                            <td colspan="3" class="text-center text-muted">
                                No tasks have been assigned for today.
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

                </div>
                <!-- END LEFT COLUMN -->

                <!-- RIGHT COLUMN (col-lg-4): Upcoming Tasks & Bills -->
<!-- RIGHT COLUMN: Upcoming Tasks & Bills -->
<div class="col-lg-4 d-flex flex-column gap-4">
    <!-- Upcoming Tasks This Week -->
    <div class="card glass-panel text-light border-white">
        <div class="card-body">
            <!-- Section Title -->
            <h5 class="fw-bold mb-3 text-white">
                <!-- Calendar Icon and Label -->
                <i class="fas fa-calendar-week me-2"></i>Upcoming Tasks This Week
            </h5>
            <!-- Add Task Button -->
            <div class="d-flex justify-content-between mb-3">
                <div class="fw-semibold">Tasks</div>
                <a class="btn btn-sm custom-create-btn text-white"
                   href="@Url.Action("Index", "Schedule")">
                    <!-- Plus Icon and Label -->
                    <i class="fas fa-plus me-1 text-white"></i>Add Task
                </a>
            </div>
    <!-- Task List -->
            <ul class="list-group list-group-flush">
                <!-- Check if there are any tasks for the current week -->
                @if (Model.CurrentWeekTasks != null && Model.CurrentWeekTasks.Any())
                {
                    <!-- Loop through each task for the current week -->
                    @foreach (var task in Model.CurrentWeekTasks)
                    {
                        <li class="list-group-item bg-transparent border-0 border-bottom border-secondary d-flex justify-content-between align-items-center">
                            <div>
                                <!-- Display Task Name -->
                                <span class="task-text">@task.Name</span>
                                <br />
                                <!-- Display Task Dates -->
                                <small class="task-date">From: @task.StartDate.ToShortDateString() to @task.EndDate.ToShortDateString()</small>
                                <!-- Display Task Time in 12-hour format -->
                                <small class="text-muted">Time: @BudgetTracker.Helpers.TimeFormatHelper.FormatTimeSpanTo12Hour(task.Time)</small>
                            </div>
                            <!-- Delete Task Form -->
                            <form asp-action="DeleteScheduledTask"
                                  asp-controller="Schedule"
                                  method="post"
                                  class="d-inline">
                                <!-- Hidden field for task ID -->
                                <input type="hidden" name="id" value="@task.Id" />
                                <!-- Submit Button for Deleting Task -->
                                <button type="submit"
                                        class="btn btn-sm custom-delete-btn text-white"
                                        title="Delete Task">
                                    <!-- Trash Icon and Label -->
                                    <i class="fas fa-trash me-1 text-white"></i>Delete
                                </button>
                            </form>
                        </li>
                    }
                }
                else
                {
                    <!-- Message for no tasks available -->
                    <li class="list-group-item bg-transparent text-muted">
                        No tasks for this week
                    </li>
                }
            </ul>
        </div>
    </div>




<!-- Bills for the Month Section -->
<div class="card glass-panel text-light border-white">
    <div class="card-body p-3">
        <!-- Section Title -->
        <h5 class="fw-bold mb-3 text-white">
            <!-- Invoice Dollar Icon and Label -->
            <i class="fas fa-file-invoice-dollar me-2 text-info"></i>Bills for the Month
        </h5>

        <!-- Check if there are any monthly bills -->
        @if (Model.MonthlyBills != null && Model.MonthlyBills.Any())
        {
            <!-- Bills Table Container -->
            <div class="table-responsive mb-2">
                <table class="elegant-table">
                    <!-- Table Header -->
                    <thead>
                        <tr>
                            <th>Name</th> <!-- Column for bill name -->
                            <th>Amount</th> <!-- Column for bill amount -->
                            <th>Due Date</th> <!-- Column for bill due date -->
                            <th>Is Paid</th> <!-- Column for payment status -->
                        </tr>
                    </thead>
                    <!-- Table Body -->
                    <tbody>
                        <!-- Loop through each bill in the monthly bills -->
                        @foreach (var bill in Model.MonthlyBills)
                        {
                            <tr>
                                <!-- Display Bill Name -->
                                <td>@bill.Name</td>
                                <!-- Display Bill Amount (formatted as currency) -->
                                <td>@bill.Amount.ToString("C")</td>
                                <!-- Display Bill Due Date -->
                                <td>@bill.DueDate.ToShortDateString()</td>
                                <!-- Display Payment Status -->
                                <td>@(bill.IsPaid ? "Yes" : "No")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <!-- Fallback Alert for No Bills -->
            <div class="alert alert-secondary text-center mb-0" role="alert">
                No bills available for the current month.
            </div>
        }
    </div>
</div>

<!-- End of Right Column -->
</div>
</div>
</div>
</div>





<!-- Single Delete Budget Modal (shared by all budgets) -->
<div class="modal fade" id="deleteBudgetModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-light glass-panel">
            <div class="modal-header border-0">
                <h5 class="modal-title text-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>Delete Budget
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- Will be updated dynamically with JavaScript -->
                <p id="deleteBudgetModalBody"></p>
            </div>
            <div class="modal-footer border-0">
                <!-- The form that will be submitted -->
                <form id="deleteBudgetForm" method="post">
                    <input type="hidden" name="id" id="deleteBudgetId" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-danger">
                        Yes, Delete
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>



<!-- JavaScript to Dynamically Fill the Delete Budget Modal -->
    <script>
        // Wait for the DOM to be fully loaded before executing the script
        document.addEventListener("DOMContentLoaded", () => {
            // Select all delete buttons
            const deleteButtons = document.querySelectorAll(".delete-btn");
            // Get the modal body element where the confirmation message will be displayed
            const modalBody = document.getElementById("deleteBudgetModalBody");
            // Get the hidden input field in the modal for storing the budget ID
            const deleteIdInput = document.getElementById("deleteBudgetId");
            // Get the delete form element in the modal
            const deleteForm = document.getElementById("deleteBudgetForm");

            // Add a click event listener to each delete button
            deleteButtons.forEach(button => {
                button.addEventListener("click", () => {
                    // Get the budget ID and name from the button's data attributes
                    const budgetId = button.getAttribute("data-id");
                    const budgetName = button.getAttribute("data-name");

                    // Update the modal body text with the budget name
                    modalBody.textContent = `Are you sure you want to delete "${budgetName}"?`;
                    // Set the hidden input field value to the budget ID
                    deleteIdInput.value = budgetId;
                    // Update the form's action to ensure it points to the delete endpoint
                    deleteForm.action = "/Budget/Delete"; // Modify the endpoint if necessary
                });
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // Check if TempData values exist and show corresponding toast
            if ('@TempData["Successful"]' !== '') {
                const successToast = new bootstrap.Toast(document.getElementById('successToast'));
                successToast.show();
            }

            if ('@TempData["Error"]' !== '') {
                const errorToast = new bootstrap.Toast(document.getElementById('errorToast'));
                errorToast.show();
            }
        });
    </script>

