@model BudgetTracker.Models.BudgetWithTasksViewModel
@using System.Linq;

<!-- Custom Styles for a More Visually Appealing Calendar & Schedule -->
<style>
    /* Overall container styling */
    .calendar-container {
        background-color: #2c2f33;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 0 15px rgba(0,0,0,0.3);
        margin-bottom: 2rem;
        position: relative;
    }

    /* Calendar navigation buttons container */
    .calendar-nav {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 15px;
        color: #fff;
    }

    /* Month label in between prev/next */
    .calendar-nav .month-label {
        margin: 0 20px;
        font-weight: 700;
        font-size: 1.2rem;
        text-shadow: 1px 1px 2px #000;
    }

    /* Navigation buttons */
    .calendar-nav button {
        background-color: #1747f7;
        border: none;
        color: #fff;
        font-weight: 500;
        padding: 6px 12px;
        border-radius: 5px;
        transition: background-color 0.2s ease-in-out;
    }
    .calendar-nav button:hover {
        background-color: #5b6eae;
    }

    /* Table styling */
    .calendar-table {
        width: 100%;
        border-collapse: collapse;
    }

    /* Table header styling (days of the week) */
    .calendar-table thead th {
        text-align: center;
        background-color: #23272a;
        color: #fff;
        padding: 10px;
        font-weight: 600;
    }

    /* Table body cells */
    .calendar-table tbody td {
        width: 14%;
        height: 80px;
        vertical-align: top;
        text-align: center;
        border: 1px solid #ffffff33; /* semi-transparent white */
        color: #fff;
        padding: 5px;
        transition: background-color 0.2s ease-in-out;
    }

    /* Hover effect on days */
    .calendar-table tbody td:hover {
        background-color: #424549; /* Slightly lighter shade */
        cursor: pointer;
    }

    /* Class for clickable cells */
    .clickable {
        position: relative;
    }

    /* Highlight days that have tasks */
    .task-day {
        background: linear-gradient(120deg, #24a8f5 0%, #24a8f593 100%);
        color: #fff;
        font-weight: bold;
        border-radius: 8px;
        box-shadow: 0 4px 8px #24a8f593 ;
    }

    /* Make the date number more prominent */
    .task-day::before {
        content: 'â˜…';
        color: #f3e5f5;
        position: absolute;
        top: 5px;
        right: 5px;
        font-size: 0.8rem;
    }

    /* Card styling for the daily schedule */
    .glass-panel {
        background: rgba(44, 47, 51, 0.8); /* semi-transparent dark background */
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.3);
    }

    /* Schedule table styling */
    .schedule-table {
        background-color: #1c1f24; /* a deeper dark color */
        border: 1px solid #2f3136;
        border-radius: 8px;
        overflow: hidden; /* helps if we have any corner rounding */
        width: 100%;
    }
    .schedule-table th, .schedule-table td {
        vertical-align: middle !important;
        text-align: center;
    }

    /* Time column styling */
    .time-col {
        font-weight: 600;
        color: #ddd;
        min-width: 80px;
    }

    /* Task assignment cell */
    .assignment-col {
        width: 60%;
        text-align: left;
    }

    /* Action column */
    .action-col {
        width: 15%;
        text-align: right;
        padding-right: 1rem !important;
    }

    /* Custom button styling */
    .custom-create-btn {
        background-color: #7289da;
        border: none;
        color: #fff;
        transition: background-color 0.2s;
    }
    .custom-create-btn:hover {
        background-color: #5b6eae;
    }



    /* Make the assigned task name stand out */
    .assigned-task {
        color: #fff;
        font-weight: 600;
    }
</style>









<div class="container-fluid bg-dark text-light py-4">
    <!-- Page Header -->
    <h1 class="fw-bold text-center mb-4">Organize My Day</h1>
    <!-- Display the selected date in a formatted manner -->
    <h3 class="text-center mb-3">Schedule for @Model.SelectedDate.ToString("yyyy-MM-dd")</h3>

    <!-- Calendar Container -->
    <div class="calendar-container">
        <!-- Navigation Buttons for Calendar -->
        <div class="calendar-nav">
            <!-- Previous Month Button -->
            <button id="prevMonth">&laquo; Prev</button>
            <!-- Display the current month and year -->
            <span class="month-label" id="monthLabel"></span>
            <!-- Next Month Button -->
            <button id="nextMonth">Next &raquo;</button>
        </div>
        <!-- Placeholder for dynamically generated calendar -->
        <div id="calendar"></div>
    </div>


<script>
    let currentYear, currentMonth, tasksByDate;

    // Array of month names for labeling the calendar header
    const monthNames = [
        "January", "February", "March", "April",
        "May", "June", "July", "August",
        "September", "October", "November", "December"
    ];

    // Updates the month label above the calendar
    function updateMonthLabel() {
        const label = document.getElementById('monthLabel'); // Get the label element
        label.textContent = `${monthNames[currentMonth]} ${currentYear}`; // Set the text to the current month and year
    }

    // Generates the calendar for the given year and month
    function generateCalendar(year, month, tasksArr) {
        const calendar = document.getElementById('calendar'); // Get the calendar container
        const firstDay = new Date(year, month, 1).getDay(); // Find the day of the week for the 1st of the month
        const daysInMonth = new Date(year, month + 1, 0).getDate(); // Find the total days in the current month

        // Start building the calendar's HTML
        let calendarHTML = '<table class="calendar-table">';
        calendarHTML += '<thead><tr><th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th></tr></thead>';
        calendarHTML += '<tbody><tr>';

        // Add blank cells for days before the 1st of the month
        for (let i = 0; i < firstDay; i++) {
            calendarHTML += '<td></td>';
        }

        // Generate each day's cell
        for (let day = 1; day <= daysInMonth; day++) {
            // Start a new row for each Sunday
            if ((firstDay + day - 1) % 7 === 0) {
                calendarHTML += '</tr><tr>';
            }

            // Format the current date
            const currentDate = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
            const hasTasks = tasksArr.includes(currentDate); // Check if the date has associated tasks

            // Add a clickable cell for the day, with a special class if it has tasks
            calendarHTML += `
                <td class="clickable ${hasTasks ? 'task-day' : ''}"
                    onclick="selectDate(${year}, ${month}, ${day})">
                    ${day}
                </td>
            `;
        }

        // Close the last row and table
        calendarHTML += '</tr></tbody></table>';
        calendar.innerHTML = calendarHTML; // Update the calendar container's content
    }

    // Updates the calendar display for the current year and month
    function updateCalendar() {
        generateCalendar(currentYear, currentMonth, tasksByDate); // Generate the calendar
        updateMonthLabel(); // Update the month label
    }

    // Handles clicking a date in the calendar
    function selectDate(year, month, day) {
        // Format the selected date as a string
        const selectedDate = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
        // Redirect to the planner page for the selected date
        window.location.href = '/Planner?date=' + selectedDate;
    }

    // Event listener for when the page loads
    document.addEventListener('DOMContentLoaded', function () {
        // Get the initial date from the server (Model.SelectedDate)
        const selectedDate = new Date('@Model.SelectedDate.ToString("yyyy-MM-dd")');

        // Set up global variables for the current year and month
        currentYear = selectedDate.getFullYear();
        currentMonth = selectedDate.getMonth();

        // Convert the list of task dates from the server into a JavaScript array
        tasksByDate = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
            Model.TasksByDate.Keys.Select(d => d.ToString("yyyy-MM-dd"))
        ));

        // Generate the initial calendar
        updateCalendar();

        // Hook up the previous month button
        document.getElementById('prevMonth').addEventListener('click', () => {
            currentMonth--; // Decrease the month
            if (currentMonth < 0) {
                currentMonth = 11; // Wrap around to December
                currentYear--; // Move to the previous year
            }
            updateCalendar(); // Update the calendar display
        });

        // Hook up the next month button
        document.getElementById('nextMonth').addEventListener('click', () => {
            currentMonth++; // Increase the month
            if (currentMonth > 11) {
                currentMonth = 0; // Wrap around to January
                currentYear++; // Move to the next year
            }
            updateCalendar(); // Update the calendar display
        });
    });
</script>
</div>






<!-- Daily Schedule Card -->
<div class="card glass-panel mt-5 text-light">
    <!-- Card Body -->
    <div class="card-body">
        <!-- Card Header -->
        <h5 class="fw-bold mb-3 text-white">
            <i class="fas fa-clock me-2"></i> Daily Schedule
        </h5>

        <!-- Table Container for the Schedule -->
        <div class="table-responsive">
            <table class="table table-dark table-bordered border-secondary mb-0 schedule-table">
                <!-- Table Header -->
                <thead>
                    <tr>
                        <th class="time-col">Time</th> <!-- Column for Time Slots -->
                        <th class="assignment-col">Task</th> <!-- Column for Assigned Tasks -->
                        <th class="action-col">Action</th> <!-- Column for Actions -->
                    </tr>
                </thead>

                <!-- Table Body -->
                <tbody>
                    @{
                        // Define time slots for the schedule (8:00 AM to 8:00 PM in 30-minute increments)
                        var timeSlots = Enumerable.Range(8, 13)
                            .SelectMany(h => new[] { (h, 0), (h, 30) }) // Creates time slots like (8:00, 8:30)
                            .ToList();

                        // Helper function to format the time in 12-hour format with AM/PM
                        string FormatTime(int hour, int minute)
                        {
                            int displayHour = hour % 12;
                            if (displayHour == 0) displayHour = 12; // Adjust for 12 PM or 12 AM
                            string ampm = (hour < 12) ? "a.m." : "p.m.";
                            return $"{displayHour}:{minute:D2} {ampm}";
                        }
                    }

                    <!-- Iterate through each time slot -->
                    @foreach (var (hour, minute) in timeSlots)
                    {
                        // Check if there's a task assigned to the current time slot
                        var scheduledTask = Model.DailySchedules?
                            .FirstOrDefault(ds => ds.Hour == hour && ds.Minute == minute);

                        <tr>
                            <!-- Time Slot -->
                            <td class="time-col">@FormatTime(hour, minute)</td>

                            <!-- Task Assignment Column -->
                            <td class="assignment-col">
                                @if (scheduledTask != null)
                                {
                                    <!-- Display Assigned Task -->
                                    <span class="assigned-task">@scheduledTask.Task.Name</span>
                                }
                                else
                                {
                                    <!-- Form to Assign a Task -->
                                    <form method="post"
                                          asp-action="AssignTaskToTime"
                                          asp-controller="ToDo"
                                          class="row g-2 align-items-center mb-0">
                                        <!-- Hidden Fields to Pass Hour, Minute, and Selected Date -->
                                        <input type="hidden" name="hour" value="@hour" />
                                        <input type="hidden" name="minute" value="@minute" />
                                        <input type="hidden" name="selectedDate" value="@Model.SelectedDate.ToString("yyyy-MM-dd")" />

                                        <!-- Dropdown to Select Existing Tasks -->
                                        <div class="col-12 col-sm-6">
                                            <select name="taskId" class="form-select form-select-sm bg-dark text-light border-secondary">
                                                <option value="">-- Select Existing Task --</option>
                                                @foreach (var task in Model.TodayTasks)
                                                {
                                                    <option value="@task.Id">@task.Name</option>
                                                }
                                            </select>
                                        </div>

                                        <!-- Input Field to Add a New Task -->
                                        <div class="col-12 col-sm-6">
                                            <input type="text"
                                                   name="newTaskName"
                                                   class="form-control form-control-sm bg-dark text-light border-secondary"
                                                   placeholder="Or new task name..." />
                                        </div>

                                        <!-- Assign Task Button -->
                                        <div class="col-12 d-grid mt-2">
                                            <button type="submit" class="btn btn-sm custom-bills-btn fw-semibold text-white ">
                                                Assign
                                            </button>
                                        </div>
                                    </form>
                                }
                            </td>

                            <!-- Action Column -->
                            <td class="action-col">
                                @if (scheduledTask != null)
                                {
                                    <!-- Form to Unassign the Task -->
                                    <form method="post"
                                          asp-action="UnassignTask"
                                          asp-controller="ToDo"
                                          class="d-inline">
                                        <!-- Hidden Fields to Pass Task ID, Hour, and Minute -->
                                        <input type="hidden" name="taskId" value="@scheduledTask.Task.Id" />
                                        <input type="hidden" name="hour" value="@hour" />
                                        <input type="hidden" name="minute" value="@minute" />
                                        <!-- Unassign Task Button -->
                                        <button type="submit" class="btn btn-sm custom-delete-btn  text-white ">
                                            Unassign
                                        </button>
                                    </form>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
