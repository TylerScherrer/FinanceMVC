@model BudgetTracker.Models.BudgetWithTasksViewModel
@using System.Linq;

<!-- Custom Styles for a More Visually Appealing Calendar & Schedule -->
<style>
    /* Overall container styling */
    .calendar-container {
        background-color: #2c2f33;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 0 15px rgba(0,0,0,0.3);
        margin-bottom: 2rem;
        position: relative;
    }

    /* Calendar navigation buttons container */
    .calendar-nav {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 15px;
        color: #fff;
    }

    /* Month label in between prev/next */
    .calendar-nav .month-label {
        margin: 0 20px;
        font-weight: 700;
        font-size: 1.2rem;
        text-shadow: 1px 1px 2px #000;
    }

    /* Navigation buttons */
    .calendar-nav button {
        background-color: #7289da;
        border: none;
        color: #fff;
        font-weight: 500;
        padding: 6px 12px;
        border-radius: 5px;
        transition: background-color 0.2s ease-in-out;
    }
    .calendar-nav button:hover {
        background-color: #5b6eae;
    }

    /* Table styling */
    .calendar-table {
        width: 100%;
        border-collapse: collapse;
    }

    /* Table header styling (days of the week) */
    .calendar-table thead th {
        text-align: center;
        background-color: #23272a;
        color: #fff;
        padding: 10px;
        font-weight: 600;
    }

    /* Table body cells */
    .calendar-table tbody td {
        width: 14%;
        height: 80px;
        vertical-align: top;
        text-align: center;
        border: 1px solid #ffffff33; /* semi-transparent white */
        color: #fff;
        padding: 5px;
        transition: background-color 0.2s ease-in-out;
    }

    /* Hover effect on days */
    .calendar-table tbody td:hover {
        background-color: #424549; /* Slightly lighter shade */
        cursor: pointer;
    }

    /* Class for clickable cells */
    .clickable {
        position: relative;
    }

    /* Highlight days that have tasks */
    .task-day {
        background: linear-gradient(120deg, #e53935 0%, #e35d5b 100%);
        color: #fff;
        font-weight: bold;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(229, 57, 53, 0.4);
    }

    /* Make the date number more prominent */
    .task-day::before {
        content: 'â˜…';
        color: #f3e5f5;
        position: absolute;
        top: 5px;
        right: 5px;
        font-size: 0.8rem;
    }

    /* Card styling for the daily schedule */
    .glass-panel {
        background: rgba(44, 47, 51, 0.8); /* semi-transparent dark background */
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.3);
    }

    /* Schedule table styling */
    .schedule-table {
        background-color: #1c1f24; /* a deeper dark color */
        border: 1px solid #2f3136;
        border-radius: 8px;
        overflow: hidden; /* helps if we have any corner rounding */
        width: 100%;
    }
    .schedule-table th, .schedule-table td {
        vertical-align: middle !important;
        text-align: center;
    }

    /* Time column styling */
    .time-col {
        font-weight: 600;
        color: #ddd;
        min-width: 80px;
    }

    /* Task assignment cell */
    .assignment-col {
        width: 60%;
        text-align: left;
    }

    /* Action column */
    .action-col {
        width: 15%;
        text-align: right;
        padding-right: 1rem !important;
    }

    /* Custom button styling */
    .custom-create-btn {
        background-color: #7289da;
        border: none;
        color: #fff;
        transition: background-color 0.2s;
    }
    .custom-create-btn:hover {
        background-color: #5b6eae;
    }

    /* Unassign button styling */
    .btn-outline-danger:hover {
        background-color: #ff5f57;
        border-color: #ff5f57;
        color: #fff;
    }

    /* Make the assigned task name stand out */
    .assigned-task {
        color: #fff;
        font-weight: 600;
    }
</style>

<div class="container-fluid bg-dark text-light py-4">
    <h1 class="fw-bold text-center mb-4">Organize My Day</h1>
    <h3 class="text-center mb-3">Schedule for @Model.SelectedDate.ToString("yyyy-MM-dd")</h3>

    <!-- Calendar Container -->
    <div class="calendar-container">
        <!-- Calendar Navigation (Previous / Next) -->
        <div class="calendar-nav">
            <button id="prevMonth">&laquo; Prev</button>
            <span class="month-label" id="monthLabel"></span>
            <button id="nextMonth">Next &raquo;</button>
        </div>
        <div id="calendar"></div>
    </div>

    <script>
        let currentYear, currentMonth, tasksByDate;

        // Array of month names for labeling
        const monthNames = [
            "January", "February", "March", "April",
            "May", "June", "July", "August",
            "September", "October", "November", "December"
        ];

        function updateMonthLabel() {
            const label = document.getElementById('monthLabel');
            label.textContent = `${monthNames[currentMonth]} ${currentYear}`;
        }

        function generateCalendar(year, month, tasksArr) {
            const calendar = document.getElementById('calendar');
            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            let calendarHTML = '<table class="calendar-table">';
            calendarHTML += '<thead><tr><th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th></tr></thead>';
            calendarHTML += '<tbody><tr>';

            // Blank cells for days before the 1st of the month
            for (let i = 0; i < firstDay; i++) {
                calendarHTML += '<td></td>';
            }

            // Render each day in the month
            for (let day = 1; day <= daysInMonth; day++) {
                // Start a new row on Sunday
                if ((firstDay + day - 1) % 7 === 0) {
                    calendarHTML += '</tr><tr>';
                }

                const currentDate = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
                const hasTasks = tasksArr.includes(currentDate);

                // Render TD
                calendarHTML += `
                    <td class="clickable ${hasTasks ? 'task-day' : ''}"
                        onclick="selectDate(${year}, ${month}, ${day})">
                        ${day}
                    </td>
                `;
            }

            calendarHTML += '</tr></tbody></table>';
            calendar.innerHTML = calendarHTML;
        }

        function updateCalendar() {
            generateCalendar(currentYear, currentMonth, tasksByDate);
            updateMonthLabel();
        }

        function selectDate(year, month, day) {
            const selectedDate = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
            window.location.href = '/Planner?date=' + selectedDate;
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Get the initial date from the server (Model.SelectedDate)
            const selectedDate = new Date('@Model.SelectedDate.ToString("yyyy-MM-dd")');

            // Set up global year & month from the selected date
            currentYear = selectedDate.getFullYear();
            currentMonth = selectedDate.getMonth();

            tasksByDate = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
                Model.TasksByDate.Keys.Select(d => d.ToString("yyyy-MM-dd"))
            ));

            // Generate the initial calendar
            updateCalendar();

            // Hook up Prev/Next buttons
            document.getElementById('prevMonth').addEventListener('click', () => {
                currentMonth--;
                if (currentMonth < 0) {
                    currentMonth = 11;
                    currentYear--;
                }
                updateCalendar();
            });

            document.getElementById('nextMonth').addEventListener('click', () => {
                currentMonth++;
                if (currentMonth > 11) {
                    currentMonth = 0;
                    currentYear++;
                }
                updateCalendar();
            });
        });
    </script>
</div>

<!-- Daily Schedule Card -->
<div class="card glass-panel mt-5 text-light">
    <div class="card-body">
        <h5 class="fw-bold mb-3 text-white">
            <i class="fas fa-clock me-2"></i> Daily Schedule
        </h5>
        <div class="table-responsive">
            <table class="table table-dark table-bordered border-secondary mb-0 schedule-table">
                <thead>
                    <tr>
                        <th class="time-col">Time</th>
                        <th class="assignment-col">Task</th>
                        <th class="action-col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @* We'll create a list of half-hour increments from 8:00 to 20:00 *@
                    @{
                        var timeSlots = Enumerable.Range(8, 13) // 8 through 20 is 13 hours
                            .SelectMany(h => new[] { (h, 0), (h, 30) })
                            .ToList(); // e.g. (8,0), (8,30), (9,0), (9,30)...

                        // Helper function to format times
                        string FormatTime(int hour, int minute)
                        {
                            // Convert to 12-hour format
                            int displayHour = hour % 12;
                            if (displayHour == 0) displayHour = 12;
                            string ampm = (hour < 12) ? "a.m." : "p.m.";
                            return $"{displayHour}:{minute:D2} {ampm}";
                        }
                    }

                    @foreach (var (hour, minute) in timeSlots)
                    {
                        // Attempt to find a scheduled task matching this hour/minute
                        var scheduledTask = Model.DailySchedules?.FirstOrDefault(ds => ds.Hour == hour && ds.Minute == minute);

                        <tr>
                            <td class="time-col">@FormatTime(hour, minute)</td>
                            <td class="assignment-col">
                                @if (scheduledTask != null)
                                {
                                    <span class="assigned-task">@scheduledTask.Task.Name</span>
                                }
                                else
                                {
                                    <!-- Form to assign a task -->
                                    <form method="post"
                                          asp-action="AssignTaskToTime"
                                          asp-controller="ToDo"
                                          class="row g-2 align-items-center mb-0">
                                        <input type="hidden" name="hour" value="@hour" />
                                        <input type="hidden" name="minute" value="@minute" />
                                        <input type="hidden" name="selectedDate" value="@Model.SelectedDate.ToString("yyyy-MM-dd")" />
                                        <div class="col-7">
                                            <select name="taskId" class="form-select form-select-sm bg-dark text-light border-secondary">
                                                <option value="">-- Select Task --</option>
                                                @foreach (var task in Model.TodayTasks)
                                                {
                                                    <option value="@task.Id">@task.Name</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="col-5 d-grid">
                                            <button type="submit" class="btn btn-sm custom-create-btn fw-semibold">
                                                Assign
                                            </button>
                                        </div>
                                    </form>
                                }
                            </td>
                            <td class="action-col">
                                @if (scheduledTask != null)
                                {
                                    <form method="post"
                                          asp-action="UnassignTask"
                                          asp-controller="ToDo"
                                          class="d-inline">
                                        <input type="hidden" name="taskId" value="@scheduledTask.Task.Id" />
                                        <input type="hidden" name="hour" value="@hour" />
                                        <input type="hidden" name="minute" value="@minute" />
                                        <button type="submit" class="btn btn-sm btn-outline-danger">
                                            Unassign
                                        </button>
                                    </form>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
