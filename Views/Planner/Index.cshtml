@model BudgetTracker.Models.BudgetWithTasksViewModel
@using System.Linq;

<!-- Custom Styles for a More Visually Appealing Calendar -->
<style>
    /* Overall container styling */
    .calendar-container {
        background-color: #2c2f33;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 0 15px rgba(0,0,0,0.3);
        margin-bottom: 2rem;
    }

    /* Calendar Title/Header */
    .calendar-header {
        text-align: center;
        margin-bottom: 15px;
        color: #fff;
    }

    /* Table styling */
    .calendar-table {
        width: 100%;
        border-collapse: collapse;
    }

    /* Table header styling (days of the week) */
    .calendar-table thead th {
        text-align: center;
        background-color: #23272a;
        color: #fff;
        padding: 10px;
        font-weight: 600;
    }

    /* Table body cells */
    .calendar-table tbody td {
        width: 14%;
        height: 80px;
        vertical-align: top;
        text-align: center;
        border: 1px solid #ffffff33; /* semi-transparent white */
        color: #fff;
        padding: 5px;
        transition: background-color 0.2s ease-in-out;
    }

    /* Hover effect on days */
    .calendar-table tbody td:hover {
        background-color: #424549; /* Slightly lighter shade */
        cursor: pointer;
    }

    /* Class for clickable cells */
    .clickable {
        position: relative;
    }

    /* Highlight days that have tasks */
    .task-day {
        background: linear-gradient(120deg, #e53935 0%, #e35d5b 100%);
        color: #fff;
        font-weight: bold;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(229, 57, 53, 0.4);
    }

    /* Make the date number more prominent */
    .task-day::before {
        content: 'â˜…';
        color: #f3e5f5;
        position: absolute;
        top: 5px;
        right: 5px;
        font-size: 0.8rem;
    }

    /* Style the heading above the table */
    .schedule-title {
        color: #fff;
        font-weight: 700;
        margin-bottom: 1rem;
        text-align: center;
    }

    /* Card styling for the daily schedule */
    .glass-panel {
        background: rgba(44, 47, 51, 0.8); /* semi-transparent dark background */
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.3);
    }

    /* Custom button styling */
    .custom-create-btn {
        background-color: #7289da;
        border: none;
        color: #fff;
    }
    .custom-create-btn:hover {
        background-color: #5b6eae;
    }
</style>

<div class="container-fluid bg-dark text-light py-4">
    <h1 class="fw-bold text-center mb-4">Organize My Day</h1>
    <h3 class="text-center mb-3">Schedule for @Model.SelectedDate.ToString("yyyy-MM-dd")</h3>

    <!-- Calendar Container -->
    <div class="calendar-container" id="calendar"></div>

    <script>
        function generateCalendar(year, month, tasksByDate) {
            const calendar = document.getElementById('calendar');
            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            let calendarHTML = '<table class="calendar-table">';
            calendarHTML += '<thead><tr><th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th></tr></thead>';
            calendarHTML += '<tbody><tr>';

            // Blank cells for days before the 1st of the month
            for (let i = 0; i < firstDay; i++) {
                calendarHTML += '<td></td>';
            }

            // Render each day in the month
            for (let day = 1; day <= daysInMonth; day++) {
                // Start a new row on Sunday
                if ((firstDay + day - 1) % 7 === 0) {
                    calendarHTML += '</tr><tr>';
                }

                const currentDate = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
                const hasTasks = tasksByDate.includes(currentDate);

                console.log(`Checking Date: ${currentDate}, Has Tasks: ${hasTasks}`);

                calendarHTML += `
                    <td class="clickable ${hasTasks ? 'task-day' : ''}"
                        onclick="selectDate(${year}, ${month}, ${day})">
                        ${day}
                    </td>
                `;
            }

            calendarHTML += '</tr></tbody></table>';
            calendar.innerHTML = calendarHTML;
        }

        function selectDate(year, month, day) {
            const selectedDate = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
            window.location.href = '/Planner?date=' + selectedDate;
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Generate calendar based on Model.SelectedDate
            const selectedDate = new Date('@Model.SelectedDate.ToString("yyyy-MM-dd")');

            const tasksByDate = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
                Model.TasksByDate.Keys.Select(d => d.ToString("yyyy-MM-dd"))
            ));

            console.log('Tasks by Date:', tasksByDate);
            generateCalendar(selectedDate.getFullYear(), selectedDate.getMonth(), tasksByDate);
        });
    </script>
</div>

<!-- Daily Schedule Card -->
<div class="card glass-panel mt-5 text-light">
    <div class="card-body">
        <h5 class="fw-bold mb-3 text-white">
            <i class="fas fa-clock me-2"></i>Daily Schedule
        </h5>
        <div class="table-responsive">
            <table class="table table-dark table-bordered border-secondary align-middle mb-0">
                <thead>
                    <tr>
                        <th style="width:15%">Time</th>
                        <th>Task</th>
                        <th style="width:10%">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int hour = 8; hour <= 20; hour++) // from 8:00 AM to 8:00 PM
                    {
                        var scheduledTask = Model.DailySchedules?
                            .FirstOrDefault(ds => ds.Hour == hour);

                        <tr>
                            <td class="fw-semibold">
                                @(hour <= 12 ? $"{hour} a.m." : $"{hour - 12} p.m.")
                            </td>
                            <td>
                                @if (scheduledTask != null)
                                {
                                    <span class="fw-bold text-white">
                                        @scheduledTask.Task.Name
                                    </span>
                                }
                                else
                                {
                                    <form method="post"
                                          asp-action="AssignTaskToTime"
                                          asp-controller="ToDo"
                                          class="row g-2 align-items-center">
                                        <input type="hidden" name="hour" value="@hour" />
                                        <input type="hidden" name="selectedDate" value="@Model.SelectedDate.ToString("yyyy-MM-dd")" />
                                        <div class="col-8">
                                            <select name="taskId" class="form-select form-select-sm bg-dark text-light border-secondary">
                                                <option value="">-- Select Task --</option>
                                                @foreach (var task in Model.TodayTasks)
                                                {
                                                    <option value="@task.Id">@task.Name</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="col-4 d-grid">
                                            <button type="submit" class="btn btn-sm custom-create-btn fw-semibold">Assign</button>
                                        </div>
                                    </form>
                                }
                            </td>
                            <td>
                                @if (scheduledTask != null)
                                {
                                    <form method="post"
                                          asp-action="UnassignTask"
                                          asp-controller="ToDo"
                                          class="d-inline">
                                        <input type="hidden" name="taskId" value="@scheduledTask.Task.Id" />
                                        <input type="hidden" name="hour" value="@hour" />
                                        <button type="submit" class="btn btn-sm btn-outline-danger">
                                            Unassign
                                        </button>
                                    </form>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
